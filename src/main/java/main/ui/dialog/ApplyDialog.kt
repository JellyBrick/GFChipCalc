package main.ui.dialog

import main.App
import main.puzzle.Chip
import main.puzzle.Tag
import main.ui.component.TagPanel
import main.ui.resource.AppImage
import main.ui.resource.AppText
import main.util.Fn
import java.awt.BorderLayout
import java.awt.Dimension
import java.awt.Insets
import java.awt.event.ActionEvent
import java.awt.event.MouseAdapter
import java.awt.event.MouseEvent
import java.util.function.Consumer
import javax.swing.*

/**
 *
 * @author Bunnyspa
 */
class ApplyDialog private constructor(app: App) : JDialog() {
    private val app: App
    private val tp: TagPanel
    private fun init() {
        title = app.getText(AppText.APPLY_TITLE)
        tagPanel!!.add(tp)
        colorOrangeButton!!.text = app.getText(AppText.CHIP_COLOR_ORANGE)
        colorBlueButton!!.text = app.getText(AppText.CHIP_COLOR_BLUE)
        levelMinButton!!.text = app.getText(AppText.UNIT_LEVEL, "0")
        levelMaxButton!!.text = app.getText(AppText.UNIT_LEVEL, Chip.LEVEL_MAX)
        markAllButton!!.text = app.getText(AppText.APPLY_MARK_ALL)
        markNoneButton!!.text = app.getText(AppText.APPLY_MARK_NONE)
        tagDescLabel!!.text = app.getText(AppText.APPLY_TAG_DESC)
        cancelButton!!.text = app.getText(AppText.ACTION_CANCEL)
        rotateLeftButton!!.icon = AppImage.ROTATE_LEFT
        rotateRightButton!!.icon = AppImage.ROTATE_RIGHT
        addListeners()
        val d = preferredSize
        d.height = app.mf.preferredDialogSize.height
        preferredSize = d
        pack()
    }

    private fun addListeners() {
        Fn.addEscDisposeListener(this)
        tp.addTableMouseListener(object : MouseAdapter() {
            override fun mousePressed(mouseEvent: MouseEvent) {
                if (mouseEvent.clickCount >= 2 && tp.selectedRow > -1) {
                    applyTag()
                }
            }
        })
    }

    private fun applyTag() {
        val tag = tp.getTag(tp.selectedRow)
        val chips = app.mf.inv_getFilteredChips()
        if (chips.stream().allMatch { chip: Chip? -> chip!!.containsTag(tag) }) {
            // remove
            confirmAndApply { t: Chip -> t.setTag(tag, false) }
            if (app.mf.inv_getAllTags().stream().noneMatch { t: Tag? -> t == tag }) {
                app.filter.includedTags.removeIf { t: Tag? -> t == tag }
                app.filter.excludedTags.removeIf { t: Tag? -> t == tag }
                app.mf.display_applyFilterSort()
            }
        } else {
            // add
            confirmAndApply { t: Chip -> t.setTag(tag, true) }
        }
    }

    private fun confirmAndApply(action: Consumer<in Chip>) {
        val `val` = JOptionPane.showConfirmDialog(
            this,
            app.getText(AppText.APPLY_CONFIRM_DESC),
            app.getText(AppText.APPLY_TITLE),
            JOptionPane.YES_NO_OPTION
        )
        if (`val` == JOptionPane.YES_OPTION) {
            app.mf.invStat_applyAll(action)
            closeDialog()
        }
    }

    private fun closeDialog() {
        dispose()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        cancelButton = JButton()
        rotateLeftButton = JButton()
        rotateRightButton = JButton()
        jPanel1 = JPanel()
        colorOrangeButton = JButton()
        colorBlueButton = JButton()
        jPanel2 = JPanel()
        levelMinButton = JButton()
        levelMaxButton = JButton()
        jPanel3 = JPanel()
        markAllButton = JButton()
        markNoneButton = JButton()
        tagPanel = JPanel()
        tagDescLabel = JLabel()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        title = "모두 적용"
        modalityType = ModalityType.APPLICATION_MODAL
        isResizable = false
        type = Type.UTILITY
        cancelButton!!.text = "적용 취소"
        cancelButton!!.addActionListener { evt: ActionEvent -> cancelButtonActionPerformed(evt) }
        rotateLeftButton!!.margin = Insets(4, 4, 4, 4)
        rotateLeftButton!!.addActionListener { evt: ActionEvent -> rotateLeftButtonActionPerformed(evt) }
        rotateRightButton!!.margin = Insets(4, 4, 4, 4)
        rotateRightButton!!.addActionListener { evt: ActionEvent -> rotateRightButtonActionPerformed(evt) }
        colorOrangeButton!!.text = "주황"
        colorOrangeButton!!.preferredSize = Dimension(100, 22)
        colorOrangeButton!!.addActionListener { evt: ActionEvent -> colorOrangeButtonActionPerformed(evt) }
        colorBlueButton!!.text = "파랑"
        colorBlueButton!!.preferredSize = Dimension(100, 22)
        colorBlueButton!!.addActionListener { evt: ActionEvent -> colorBlueButtonActionPerformed(evt) }
        val jPanel1Layout = GroupLayout(jPanel1)
        jPanel1!!.layout = jPanel1Layout
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel1Layout.createSequentialGroup()
                        .addComponent(
                            colorOrangeButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            colorBlueButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                )
        )
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(colorOrangeButton, GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE.toInt())
                .addComponent(
                    colorBlueButton,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE.toInt()
                )
        )
        levelMinButton!!.text = "0강"
        levelMinButton!!.preferredSize = Dimension(100, 22)
        levelMinButton!!.addActionListener { evt: ActionEvent -> levelMinButtonActionPerformed(evt) }
        levelMaxButton!!.text = "20강"
        levelMaxButton!!.preferredSize = Dimension(100, 22)
        levelMaxButton!!.addActionListener { evt: ActionEvent -> levelMaxButtonActionPerformed(evt) }
        val jPanel2Layout = GroupLayout(jPanel2)
        jPanel2!!.layout = jPanel2Layout
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout.createSequentialGroup()
                        .addComponent(
                            levelMinButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            levelMaxButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                )
        )
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(levelMaxButton, GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE.toInt())
                .addComponent(
                    levelMinButton,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE.toInt()
                )
        )
        markAllButton!!.text = "마킹"
        markAllButton!!.preferredSize = Dimension(100, 22)
        markAllButton!!.addActionListener { evt: ActionEvent -> markAllButtonActionPerformed(evt) }
        markNoneButton!!.text = "마킹 해제"
        markNoneButton!!.preferredSize = Dimension(100, 22)
        markNoneButton!!.addActionListener { evt: ActionEvent -> markNoneButtonActionPerformed(evt) }
        val jPanel3Layout = GroupLayout(jPanel3)
        jPanel3!!.layout = jPanel3Layout
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel3Layout.createSequentialGroup()
                        .addComponent(
                            markAllButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            markNoneButton,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                )
        )
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(markAllButton, GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE.toInt())
                .addComponent(
                    markNoneButton,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE.toInt()
                )
        )
        tagPanel!!.preferredSize = Dimension(250, 250)
        tagPanel!!.layout = BorderLayout()
        tagDescLabel!!.text = "<html>\n태그를 더블클릭시 모든 (필터된) 칩에 추가합니다.<br>\n모든 칩이 가진 태그는 배경색이 있으며 더블클릭시 제거합니다.\n</html>"
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(
                                    cancelButton,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addGroup(
                                                    layout.createSequentialGroup()
                                                        .addComponent(rotateLeftButton)
                                                        .addPreferredGap(
                                                            LayoutStyle.ComponentPlacement.RELATED,
                                                            GroupLayout.DEFAULT_SIZE,
                                                            Short.MAX_VALUE.toInt()
                                                        )
                                                        .addComponent(rotateRightButton)
                                                )
                                                .addComponent(
                                                    jPanel3,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(
                                                    jPanel1,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(
                                                    jPanel2,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                    tagPanel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(tagDescLabel)
                                        )
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            jPanel1,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(
                                            jPanel2,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(
                                            jPanel3,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(rotateLeftButton)
                                                .addComponent(rotateRightButton)
                                        )
                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            tagDescLabel,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(
                                            tagPanel,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun cancelButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog()
    } //GEN-LAST:event_cancelButtonActionPerformed

    private fun colorOrangeButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_colorOrangeButtonActionPerformed
        confirmAndApply { t: Chip -> t.color = Chip.COLOR_ORANGE }
    } //GEN-LAST:event_colorOrangeButtonActionPerformed

    private fun colorBlueButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_colorBlueButtonActionPerformed
        confirmAndApply { t: Chip -> t.color = Chip.COLOR_BLUE }
    } //GEN-LAST:event_colorBlueButtonActionPerformed

    private fun levelMinButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_levelMinButtonActionPerformed
        confirmAndApply { obj: Chip -> obj.setMinInitLevel() }
    } //GEN-LAST:event_levelMinButtonActionPerformed

    private fun levelMaxButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_levelMaxButtonActionPerformed
        confirmAndApply { obj: Chip -> obj.setMaxInitLevel() }
    } //GEN-LAST:event_levelMaxButtonActionPerformed

    private fun markAllButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_markAllButtonActionPerformed
        confirmAndApply { t: Chip -> t.isMarked = true }
    } //GEN-LAST:event_markAllButtonActionPerformed

    private fun markNoneButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_markNoneButtonActionPerformed
        confirmAndApply { t: Chip -> t.isMarked = false }
    } //GEN-LAST:event_markNoneButtonActionPerformed

    private fun rotateLeftButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_rotateLeftButtonActionPerformed
        confirmAndApply { t: Chip -> t.initRotate(Chip.COUNTERCLOCKWISE) }
    } //GEN-LAST:event_rotateLeftButtonActionPerformed

    private fun rotateRightButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_rotateRightButtonActionPerformed
        confirmAndApply { t: Chip -> t.initRotate(Chip.CLOCKWISE) }
    } //GEN-LAST:event_rotateRightButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var cancelButton: JButton? = null
    private var colorBlueButton: JButton? = null
    private var colorOrangeButton: JButton? = null
    private var jPanel1: JPanel? = null
    private var jPanel2: JPanel? = null
    private var jPanel3: JPanel? = null
    private var levelMaxButton: JButton? = null
    private var levelMinButton: JButton? = null
    private var markAllButton: JButton? = null
    private var markNoneButton: JButton? = null
    private var rotateLeftButton: JButton? = null
    private var rotateRightButton: JButton? = null
    private var tagDescLabel: JLabel? = null
    private var tagPanel: JPanel? = null // End of variables declaration//GEN-END:variables

    companion object {
        fun getInstance(app: App): ApplyDialog {
            return ApplyDialog(app)
        }
    }

    init {
        initComponents()
        this.app = app
        tp = TagPanel(app, this, null, true)
        init()
    }
}