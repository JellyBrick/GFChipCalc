package main.ui.dialog

import main.App
import main.puzzle.Chip
import main.puzzle.Tag
import main.ui.component.TagPanel
import main.ui.resource.AppText
import main.util.Fn
import java.awt.BorderLayout
import java.awt.Dimension
import java.awt.event.ActionEvent
import java.util.function.Consumer
import javax.swing.*
import javax.swing.event.TableModelEvent

/**
 *
 * @author Bunnyspa
 */
class TagDialog private constructor(app: App, chips: List<Chip?>) : JDialog() {
    private val app: App
    private val tp: TagPanel
    private val chips: List<Chip?>
    private fun init() {
        val tag = app.getText(AppText.TAG_TITLE)
        val count = app.getText(AppText.UNIT_COUNT, chips.size.toString())
        title = if (chips.size == 1) tag else "$tag - $count"
        closeButton.text = app.getText(AppText.ACTION_CLOSE)
        descLabel.text = app.getText(AppText.TAG_DESC)
        tagPanel.add(tp)
        addListeners()
        val d = preferredSize
        d.height = app.mf.preferredDialogSize.height
        preferredSize = d
        pack()
    }

    private fun addListeners() {
        Fn.addEscDisposeListener(this)
        tp.addTableModelListener { e: TableModelEvent? -> applyTag() }
    }

    private fun applyTag() {
        val i = tp.selectedRow
        if (0 <= i) {
            chips.forEach(Consumer { c: Chip? -> c!!.setTag(tp.getTag(i), tp.isChecked(i)) })
            app.mf.invStat_enableSave()
            app.mf.invStat_loadStats()
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private fun closeButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_closeButtonActionPerformed
        dispose()
    } //GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var closeButton: JButton = JButton()
    private var descLabel: JLabel
    private var tagPanel: JPanel // End of variables declaration//GEN-END:variables

    companion object {
        fun getInstance(app: App, chips: List<Chip?>): TagDialog {
            return TagDialog(app, chips)
        }

        private fun allChipContainsTag(chips: List<Chip?>, t: Tag?): Boolean {
            return chips.stream().allMatch { chip -> chip!!.containsTag(t) }
        }
    }

    init {
        descLabel = JLabel()
        tagPanel = JPanel()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        title = "태그"
        modalityType = ModalityType.APPLICATION_MODAL
        isResizable = false
        type = Type.UTILITY
        closeButton.text = "닫기"
        closeButton.addActionListener { evt: ActionEvent -> closeButtonActionPerformed(evt) }
        descLabel.text = "더이상 사용하지 않는 태그는 자동으로 삭제됩니다."
        tagPanel.preferredSize = Dimension(250, 250)
        tagPanel.layout = BorderLayout()
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    tagPanel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            descLabel,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(closeButton)
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            tagPanel,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(closeButton)
                                .addComponent(descLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                        )
                        .addContainerGap()
                )
        )
        layout.linkSize(SwingConstants.VERTICAL, closeButton, descLabel)
        pack()
        this.app = app
        this.chips = chips
        tp = TagPanel(app, this, { t -> allChipContainsTag(chips, t) }, true)
        init()
    }
}