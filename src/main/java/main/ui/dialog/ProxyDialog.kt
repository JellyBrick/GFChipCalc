package main.ui.dialog

import main.App
import main.http.Proxy
import main.json.JsonParser
import main.puzzle.Chip
import main.puzzle.Tag
import main.ui.help.HelpProxyDialog
import main.ui.resource.AppText
import main.util.Fn
import java.awt.Color
import java.awt.Dimension
import java.awt.event.ActionEvent
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.io.IOException
import javax.swing.*

/**
 *
 * @author Bunnyspa
 */
class ProxyDialog private constructor(app: App) : JDialog() {
    private enum class Stage {
        ERROR, START, DONE, SAVE
    }

    private val app: App
    private var proxy: Proxy
    private var chips: List<Chip>
    private var cancelled = true
    private fun init() {
        title = app.getText(AppText.PROXY_TITLE)
        warningLabel!!.text = app.getText(AppText.PROXY_WARNING)
        okButton!!.text = app.getText(AppText.ACTION_OK)
        cancelButton!!.text = app.getText(AppText.ACTION_CANCEL)
        helpButton!!.text = app.getText(AppText.HELP_TITLE)
        setStage(Stage.START)
        addListeners()
        pack()
    }

    private fun addListeners() {
        Fn.addEscListener(this) { terminate() }
    }

    private fun setStage(stage: Stage) {
        when (stage) {
            Stage.START -> {
                instructionLabel!!.text = app.getText(AppText.PROXY_STAGE1_INST)
                infoLabel!!.text =
                    app.getText(AppText.PROXY_STAGE1_INFO, proxy.address, proxy.port.toString())
                proxy.start()
            }
            Stage.DONE -> {
                val size = chips.size
                val tagStrs: MutableList<String> = mutableListOf()
                Tag.getTags(chips).forEach { t: Tag? ->
                    tagStrs.add(
                        t!!.name
                    )
                }
                val tagLine = java.lang.String.join(", ", tagStrs)
                instructionLabel!!.text = app.getText(AppText.PROXY_STAGE2_INST)
                infoLabel!!.text = app.getText(AppText.PROXY_STAGE2_INFO, size.toString(), tagLine)
                okButton!!.isEnabled = true
            }
            Stage.SAVE -> {
                chips = JsonFilterDialog.filter(app, this, chips)
                terminate()
            }
            Stage.ERROR -> {
                instructionLabel!!.text = app.getText(AppText.PROXY_ERROR_INST)
                infoLabel!!.text = app.getText(AppText.PROXY_ERROR_INFO, Proxy.PORT.toString())
            }
            else -> {
            }
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Stage Methods">
    private fun terminate() {
        proxy.stop()
        dispose()
    }

    // </editor-fold>
    fun parse(data: String) {
        chips = JsonParser.parseChip(data)
        setStage(Stage.DONE)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        cancelButton = JButton()
        instructionLabel = JLabel()
        helpButton = JButton()
        jScrollPane1 = JScrollPane()
        infoLabel = JLabel()
        warningLabel = JLabel()
        okButton = JButton()
        defaultCloseOperation = DO_NOTHING_ON_CLOSE
        title = "게임 데이터 추출"
        modalityType = ModalityType.APPLICATION_MODAL
        isResizable = false
        type = Type.UTILITY
        addWindowListener(object : WindowAdapter() {
            override fun windowClosing(evt: WindowEvent) {
                formWindowClosing(evt)
            }
        })
        cancelButton!!.text = "취소"
        cancelButton!!.addActionListener { evt: ActionEvent -> cancelButtonActionPerformed(evt) }
        instructionLabel!!.text = "instruction"
        instructionLabel!!.border = BorderFactory.createCompoundBorder(
            BorderFactory.createEtchedBorder(),
            BorderFactory.createEmptyBorder(4, 4, 4, 4)
        )
        helpButton!!.text = "도움말"
        helpButton!!.addActionListener { evt: ActionEvent -> helpButtonActionPerformed(evt) }
        jScrollPane1!!.border = BorderFactory.createCompoundBorder(
            BorderFactory.createEtchedBorder(),
            BorderFactory.createEmptyBorder(4, 4, 4, 4)
        )
        jScrollPane1!!.preferredSize = Dimension(600, 300)
        infoLabel!!.text = "info"
        infoLabel!!.verticalAlignment = SwingConstants.TOP
        jScrollPane1!!.setViewportView(infoLabel)
        warningLabel!!.foreground = Color(255, 0, 0)
        warningLabel!!.text =
            "<html>\n이 프로그램의 프록시 서버는 데이터를 추출하기 위해 필요한 기능만 넣었습니다.<br>\n이 프록시 서버로 본 용도외 이용시 생기는 문제는 책임지지 않습니다.\n</html>"
        warningLabel!!.verticalAlignment = SwingConstants.TOP
        warningLabel!!.border = BorderFactory.createEmptyBorder(0, 0, 5, 0)
        okButton!!.text = "확인"
        okButton!!.isEnabled = false
        okButton!!.addActionListener { evt: ActionEvent -> okButtonActionPerformed(evt) }
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(warningLabel)
                                .addComponent(
                                    jScrollPane1,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(helpButton)
                                        .addPreferredGap(
                                            LayoutStyle.ComponentPlacement.RELATED,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addComponent(okButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton)
                                )
                                .addComponent(
                                    instructionLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(instructionLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE.toInt())
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            warningLabel,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelButton)
                                .addComponent(helpButton)
                                .addComponent(okButton)
                        )
                        .addGap(12, 12, 12)
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun cancelButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_cancelButtonActionPerformed
        terminate()
    } //GEN-LAST:event_cancelButtonActionPerformed

    private fun formWindowClosing(evt: WindowEvent) { //GEN-FIRST:event_formWindowClosing
        terminate()
    } //GEN-LAST:event_formWindowClosing

    private fun okButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_okButtonActionPerformed
        cancelled = false
        setStage(Stage.SAVE)
    } //GEN-LAST:event_okButtonActionPerformed

    private fun helpButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_helpButtonActionPerformed
        Fn.open(this, HelpProxyDialog(app))
    } //GEN-LAST:event_helpButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var cancelButton: JButton? = null
    private var helpButton: JButton? = null
    private var infoLabel: JLabel? = null
    private var instructionLabel: JLabel? = null
    private var jScrollPane1: JScrollPane? = null
    private var okButton: JButton? = null
    private var warningLabel: JLabel? = null // End of variables declaration//GEN-END:variables

    companion object {
        fun extract(app: App): List<Chip>? {
            val dialog = ProxyDialog(app)
            Fn.open(app.mf, dialog)
            return if (dialog.cancelled) {
                null
            } else dialog.chips
        }
    }

    init {
        initComponents()
        this.app = app
        chips = mutableListOf()
        proxy = Proxy(this)
        try {
            init()
        } catch (ex: IOException) {
            setStage(Stage.ERROR)
        }
    }
}