package main.ui.dialog

import main.App
import main.puzzle.Chip
import main.puzzle.Tag
import main.ui.resource.AppText
import main.util.Fn
import java.awt.Component
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.util.*
import javax.swing.*

/**
 *
 * @author Bunnyspa
 */
class JsonFilterDialog private constructor(private val app: App, chips: List<Chip>) : JDialog() {
    private val chipsInput: List<Chip>
    private val chipsOutput: MutableList<Chip>
    private fun init() {
        title = app.getText(AppText.JSON_TITLE)
        star5CheckBox!!.text = app.getText(AppText.JSON_FILTER_STAR, "5")
        cell16RadioButton!!.text = app.getText(AppText.JSON_FILTER_SIZE, "1", "6")
        cell46RadioButton!!.text = app.getText(AppText.JSON_FILTER_SIZE, "4", "6")
        cell56RadioButton!!.text = app.getText(AppText.JSON_FILTER_SIZE, "5", "6")
        markCheckBox!!.text = app.getText(AppText.JSON_MARK)
        okButton!!.text = app.getText(AppText.ACTION_OK)
        cancelButton!!.text = app.getText(AppText.ACTION_CANCEL)
        addListeners()
        markNames
        count()
        pack()
    }

    private val markNames: Unit
        get() {
            val tagStrs: MutableSet<String?> = HashSet()
            chipsInput.map { obj: Chip? -> obj!!.tags }.forEach { ts ->
                ts.forEach { t: Tag -> tagStrs.add(t.name) }
            }
            markListLabel!!.text = app.getText(AppText.CHIP_TAG) + ": " + java.lang.String.join(", ", tagStrs)
        }

    private fun count() {
        val count = chipsInput
            .filter { c -> !star5CheckBox!!.isSelected || 5 <= c.star }
            .filter { c -> !cell56RadioButton!!.isSelected || 5 <= c.getSize() }
            .filter { c -> !cell46RadioButton!!.isSelected || 4 <= c.getSize() }.count()
        countLabel!!.text = app.getText(AppText.UNIT_COUNT, count) + "/" + app.getText(
            AppText.UNIT_COUNT,
            chipsInput.size
        )
    }

    private fun addListeners() {
        val al = ActionListener { e: ActionEvent? -> count() }
        star5CheckBox!!.addActionListener(al)
        cell16RadioButton!!.addActionListener(al)
        cell46RadioButton!!.addActionListener(al)
        cell56RadioButton!!.addActionListener(al)
        Fn.addEscDisposeListener(this)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        buttonGroup1 = ButtonGroup()
        cancelButton = JButton()
        star5CheckBox = JCheckBox()
        cell16RadioButton = JRadioButton()
        cell46RadioButton = JRadioButton()
        cell56RadioButton = JRadioButton()
        markCheckBox = JCheckBox()
        okButton = JButton()
        countLabel = JLabel()
        markListLabel = JLabel()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        title = "도움말"
        modalityType = ModalityType.APPLICATION_MODAL
        isResizable = false
        type = Type.UTILITY
        cancelButton!!.text = "cancel"
        cancelButton!!.addActionListener { evt: ActionEvent -> cancelButtonActionPerformed(evt) }
        star5CheckBox!!.text = "5 star"
        buttonGroup1!!.add(cell16RadioButton)
        cell16RadioButton!!.isSelected = true
        cell16RadioButton!!.text = "1-6 cell"
        buttonGroup1!!.add(cell46RadioButton)
        cell46RadioButton!!.text = "4-6 cell"
        buttonGroup1!!.add(cell56RadioButton)
        cell56RadioButton!!.text = "5-6 cell"
        markCheckBox!!.text = "mark"
        okButton!!.text = "ok"
        okButton!!.addActionListener { evt: ActionEvent -> okButtonActionPerformed(evt) }
        countLabel!!.text = "count"
        markListLabel!!.text = "markList"
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    markListLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            countLabel,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(okButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton)
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(star5CheckBox)
                                                .addGroup(
                                                    layout.createSequentialGroup()
                                                        .addComponent(cell16RadioButton)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cell46RadioButton)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cell56RadioButton)
                                                )
                                                .addComponent(markCheckBox)
                                        )
                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cell16RadioButton)
                                .addComponent(cell46RadioButton)
                                .addComponent(cell56RadioButton)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(star5CheckBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markCheckBox)
                        .addPreferredGap(
                            LayoutStyle.ComponentPlacement.RELATED,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addComponent(markListLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelButton)
                                .addComponent(okButton)
                                .addComponent(countLabel)
                        )
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun okButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_okButtonActionPerformed
        chipsInput
            .filter { c -> !star5CheckBox!!.isSelected || 5 == c.star }
            .filter { c -> !cell56RadioButton!!.isSelected || 5 <= c.getSize() }
            .filter { c -> !cell46RadioButton!!.isSelected || 4 <= c.getSize() }
            .forEach { e -> chipsOutput.add(e) }
        // Mark HOC tags
        if (markCheckBox!!.isSelected) {
            chipsOutput
                .filter { c -> c.tags.isNotEmpty() }
                .forEach { c -> c.isMarked = true }
        }
        dispose()
    } //GEN-LAST:event_okButtonActionPerformed

    private fun cancelButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_cancelButtonActionPerformed
        chipsOutput.addAll(chipsInput)
        dispose()
    } //GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var buttonGroup1: ButtonGroup? = null
    private var cancelButton: JButton? = null
    private var cell16RadioButton: JRadioButton? = null
    private var cell46RadioButton: JRadioButton? = null
    private var cell56RadioButton: JRadioButton? = null
    private var countLabel: JLabel? = null
    private var markCheckBox: JCheckBox? = null
    private var markListLabel: JLabel? = null
    private var okButton: JButton? = null
    private var star5CheckBox: JCheckBox? = null // End of variables declaration//GEN-END:variables

    companion object {
        fun filter(app: App, c: Component?, chips: List<Chip>): List<Chip> {
            val dialog = JsonFilterDialog(app, chips)
            Fn.open(c, dialog)
            return dialog.chipsOutput
        }
    }

    init {
        chipsInput = ArrayList(chips)
        chipsOutput = mutableListOf()
        initComponents()
        init()
    }
}