package main.ui

import main.App
import main.http.ResearchConnection
import main.puzzle.Board
import main.puzzle.BoardTemplate
import main.puzzle.Shape
import main.puzzle.assembly.Assembler
import main.ui.resource.AppImage
import main.ui.resource.AppText
import main.util.Fn
import main.util.ThreadPoolManager
import java.awt.Dimension
import java.awt.event.ActionEvent
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.util.concurrent.ExecutionException
import java.util.concurrent.Future
import java.util.concurrent.TimeUnit
import java.util.concurrent.locks.ReentrantLock
import java.util.function.Consumer
import java.util.stream.Collectors
import javax.swing.*
import kotlin.concurrent.withLock

/**
 *
 * @author Bunnyspa
 */
class ResearchFrame private constructor(private val app: App) : JFrame() {
    private val lock = ReentrantLock()
    private val condition = lock.newCondition()
    private val progTimer: Timer
    private val aRunnable: Runnable

    @Volatile
    private var running = false
    private val tasks: MutableList<Future<*>> = mutableListOf()
    private fun wait_(mili: Int) {
        lock.withLock {
            try {
                condition.await(mili.toLong(), TimeUnit.MILLISECONDS)
            } catch (ignored: InterruptedException) {
            }
        }
    }

    private fun init() {
        iconImage = AppImage.FAVICON
        title = app.getText(AppText.RESEARCH_TITLE)
        wtfLabel!!.text = app.getText(AppText.RESEARCH_WTF)
        threadLabel!!.text = app.getText(AppText.RESEARCH_THREAD)
        closeButton!!.text = app.getText(AppText.ACTION_CLOSE)
        val max = Runtime.getRuntime().availableProcessors()
        aSpinner!!.model = SpinnerNumberModel(1, 1, max, 1)
        stop()
        preferredSize = Dimension(app.mf.preferredDialogSize.width, preferredSize.height)
        pack()
    }

    private fun updateProgress() {
        val progress = ResearchConnection.progress
        if (progress == null || progress.isEmpty()) {
            progressLabel!!.text = ""
        } else {
            val split = progress.split(";").toTypedArray()
            val prog = split[0].toInt()
            val total = split[1].toInt()
            progressLabel!!.text = prog.toString() + " / " + total + " (" + Fn.fPercStr(prog.toDouble() / total) + ")"
            aProgressBar!!.maximum = total
            aProgressBar!!.value = prog
        }
    }

    private fun start() {
        running = true
        aSpinner!!.isEnabled = false
        progTimer.start()
        for (i in 0 until aSpinner!!.value as Int) {
            tasks.add(ThreadPoolManager.threadPool.submit(aRunnable))
        }
        startStopButton!!.text = app.getText(AppText.RESEARCH_STOP)
    }

    private fun stop() {
        running = false
        progTimer.stop()
        tasks.forEach(Consumer { t: Future<*>? ->
            if (t != null && !(t.isDone || t.isCancelled)) {
                try {
                    t.get()
                } catch (ignored: InterruptedException) {
                } catch (ignored: ExecutionException) {
                }
            }
        })
        tasks.clear()
        aSpinner!!.isEnabled = true
        currentLabel!!.text = app.getText(AppText.RESEARCH_READY)
        progressLabel!!.text = " "
        aProgressBar!!.maximum = 1
        aProgressBar!!.value = 0
        startStopButton!!.text = app.getText(AppText.RESEARCH_START)
    }

    private fun terminate() {
        stop()
        app.mf.isVisible = true
        dispose()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        startStopButton = JButton()
        progressLabel = JLabel()
        currentLabel = JLabel()
        aSpinner = JSpinner()
        threadLabel = JLabel()
        closeButton = JButton()
        aProgressBar = JProgressBar()
        wtfLabel = JLabel()
        defaultCloseOperation = DO_NOTHING_ON_CLOSE
        addWindowListener(object : WindowAdapter() {
            override fun windowClosing(evt: WindowEvent) {
                formWindowClosing(evt)
            }
        })
        startStopButton!!.text = "start stop"
        startStopButton!!.addActionListener { evt: ActionEvent -> startStopButtonActionPerformed(evt) }
        progressLabel!!.horizontalAlignment = SwingConstants.CENTER
        progressLabel!!.text = "progress"
        currentLabel!!.horizontalAlignment = SwingConstants.CENTER
        currentLabel!!.text = "current"
        threadLabel!!.horizontalAlignment = SwingConstants.CENTER
        threadLabel!!.text = "thread"
        closeButton!!.text = "닫기"
        closeButton!!.addActionListener { evt: ActionEvent -> closeButtonActionPerformed(evt) }
        wtfLabel!!.text = "wtf is this piece of shit"
        wtfLabel!!.verticalAlignment = SwingConstants.TOP
        wtfLabel!!.border = BorderFactory.createEmptyBorder(0, 0, 10, 0)
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                .addComponent(
                                                    startStopButton,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(aSpinner)
                                                .addComponent(
                                                    threadLabel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                    progressLabel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(
                                                    aProgressBar,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(
                                                    currentLabel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(closeButton)
                                )
                                .addComponent(
                                    wtfLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            wtfLabel,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(threadLabel)
                                .addComponent(currentLabel)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(aSpinner)
                                .addComponent(
                                    progressLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    GroupLayout.Alignment.TRAILING,
                                    layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(
                                            closeButton,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addComponent(
                                            aProgressBar,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                )
                                .addComponent(startStopButton, GroupLayout.Alignment.TRAILING)
                        )
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun startStopButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_startStopButtonActionPerformed
        if (running) {
            stop()
        } else {
            start()
        }
    } //GEN-LAST:event_startStopButtonActionPerformed

    private fun closeButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_closeButtonActionPerformed
        terminate()
    } //GEN-LAST:event_closeButtonActionPerformed

    private fun formWindowClosing(evt: WindowEvent) { //GEN-FIRST:event_formWindowClosing
        terminate()
    } //GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var aProgressBar: JProgressBar? = null
    private var aSpinner: JSpinner? = null
    private var closeButton: JButton? = null
    private var currentLabel: JLabel? = null
    private var progressLabel: JLabel? = null
    private var startStopButton: JButton? = null
    private var threadLabel: JLabel? = null
    private var wtfLabel: JLabel? = null // End of variables declaration//GEN-END:variables

    companion object {
        fun getInstance(app: App): ResearchFrame {
            return ResearchFrame(app)
        }
    }

    init {
        progTimer = Timer(1000) { e: ActionEvent? -> updateProgress() }
        aRunnable = Runnable {
            while (running) {
                val task = ResearchConnection.task
                //                System.out.println(task);
                if (task == null || task.isEmpty()) {
                    currentLabel!!.text = app.getText(AppText.RESEARCH_EMPTY)
                    wait_(10000)
                } else {
                    val split = task.split(";").toTypedArray()
                    val boardName: String = Board.getTrueName(split[0])
                    val boardStar = split[1].toInt()
                    if (split.size == 2) {
                        currentLabel!!.text =
                            app.getText(AppText.RESEARCH_WAITING, boardName, boardStar.toString())
                        wait_(5000)
                    } else {
                        val shapeStrs = split[2]
                        currentLabel!!.text =
                            app.getText(AppText.RESEARCH_WORKING, boardName, boardStar.toString())

                        // Run task
                        val shapes: MutableList<Shape> = mutableListOf()
                        for (s in shapeStrs.split(",").toTypedArray()) {
                            shapes.add(Shape.byId(s.toInt()))
                        }
                        val result: BoardTemplate = Assembler.generateTemplate(
                            boardName,
                            boardStar,
                            shapes
                        ) { running }
                        if (running) {
                            if (result.isEmpty()) {
                                ResearchConnection.sendResult(shapes.stream().map { s: Shape? -> s!!.id.toString() }
                                    .collect(Collectors.joining(",")).toString() + ";-")
                            } else {
                                ResearchConnection.sendResult(result.toData())
                            }
                        }
                    }
                }
                wait_(10)
            }
        }
        initComponents()
        init()
    }
}