package main.ui.help

import main.App
import main.ui.resource.AppImage
import main.util.Fn
import java.awt.Color
import java.awt.Dimension
import java.awt.GraphicsEnvironment
import java.awt.Image
import java.awt.event.MouseAdapter
import java.awt.event.MouseEvent
import javax.swing.*

/**
 *
 * @author Bunnyspa
 */
class HelpAboutHiddenDialog private constructor(app: App) : JDialog() {
    private val app: App
    private fun init() {
        background = Color(0, 0, 0, 0)
        val dm = GraphicsEnvironment.getLocalGraphicsEnvironment().defaultScreenDevice.displayMode
        val width = dm.width
        val height = dm.height
        preferredSize = Dimension(width, height)
        loadImage(height.toDouble())
        pack()
        addListeners()
    }

    private fun addListeners() {
        Fn.addEscDisposeListener(this)
        imageLabel!!.addMouseListener(object : MouseAdapter() {
            override fun mouseClicked(e: MouseEvent) {
                dispose()
            }
        })
    }

    private fun loadImage(height: Double) {
        val icon = AppImage.MP448
        val factor = height / icon.iconHeight
        val image = icon.image.getScaledInstance(
            (icon.iconWidth * factor).toInt(),
            (icon.iconHeight * factor).toInt(),
            Image.SCALE_SMOOTH
        )
        imageLabel!!.icon = ImageIcon(image)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        imageLabel = JLabel()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        isAlwaysOnTop = true
        modalityType = ModalityType.APPLICATION_MODAL
        isUndecorated = true
        isResizable = false
        imageLabel!!.horizontalAlignment = SwingConstants.CENTER
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(imageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(imageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
        )
    } // </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var imageLabel: JLabel? = null // End of variables declaration//GEN-END:variables

    companion object {
        fun getInstance(app: App): HelpAboutHiddenDialog {
            return HelpAboutHiddenDialog(app)
        }
    }

    init {
        initComponents()
        this.app = app
        init()
    }
}