package main.ui.help

import main.App
import main.ui.resource.AppImage
import main.ui.resource.AppText
import main.util.Fn
import java.awt.BorderLayout
import java.awt.event.ActionEvent
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.util.function.Consumer
import javax.swing.*
import javax.swing.border.EmptyBorder

/**
 *
 * @author Bunnyspa
 */
class HelpAppDialog(private val app: App) : JDialog() {
    private val cyclers: MutableList<ImageCycler> = mutableListOf()

    private class ImageCycler(private val label: JLabel, vararg icons: ImageIcon) {
        private val icons: List<ImageIcon>
        private val timer: Timer
        private var cycle: Int
        private fun cycleImage() {
            cycle = (cycle + 1) % icons.size
            label.icon = icons[cycle]
        }

        fun dispose() {
            timer.stop()
        }

        init {
            if (icons.isNotEmpty()) {
                label.icon = icons[0]
            }
            this.icons = icons.toList()
            cycle = 0
            timer = Timer(1000) { cycleImage() }
            timer.start()
        }
    }

    private class IconText(text: String?, vararg icons: ImageIcon) {
        val icons: Array<ImageIcon> = icons.toList().toTypedArray()
        val text: String?

        init {
            this.text = text
        }
    }

    private fun init() {
        title = app.getText(AppText.HELP_PROGRAM)
        closeButton!!.text = app.getText(AppText.ACTION_CLOSE)
        addTabs()
        addListeners()
        pack()
    }

    private fun addListeners() {
        Fn.addEscDisposeListener(this)
    }

    private fun addTabs() {
        aTabbedPane!!.addTab(
            app.getText(AppText.HELP_APP_IMPORT), generatePanels(
                IconText(app.getText(AppText.HELP_APP_IMPORT_PROXY), AppImage.PHONE),
                IconText(app.getText(AppText.HELP_APP_IMPORT_IMAGESCAN), AppImage.PICTURE),
                IconText(app.getText(AppText.HELP_APP_IMPORT_OPEN), AppImage.OPEN)
            )
        )
        aTabbedPane!!.addTab(
            app.getText(AppText.HELP_APP_OPTIMIZE), generatePanels(
                IconText(
                    app.getText(AppText.HELP_APP_OPTIMIZE_FILTER),
                    AppImage.FILTER,
                    AppImage.FILTER_APPLY
                ),
                IconText(
                    app.getText(AppText.HELP_APP_OPTIMIZE_SETTING),
                    AppImage.SETTING,
                    AppImage.SETTING_PRESET,
                    AppImage.SETTING_STAT,
                    AppImage.SETTING_PT
                ),
                IconText(app.getText(AppText.HELP_APP_OPTIMIZE_MARK), AppImage.UNCHECKED, AppImage.CHECKED)
            )
        )
    }

    private fun generatePanels(vararg its: IconText): JPanel {
        val out = JPanel()
        out.layout = BoxLayout(out, BoxLayout.Y_AXIS)
        for (i in its.indices) {
            val it = its[i]
            out.add(generatePanel(it.text, *it.icons))
            if (i < its.size - 1) {
                out.add(JSeparator(JSeparator.HORIZONTAL))
            }
        }
        return out
    }

    private fun generatePanel(text: String?, vararg icons: ImageIcon): JPanel {
        val out = JPanel(BorderLayout(10, 10))
        val iconLabel = JLabel()
        val cycler = ImageCycler(iconLabel, *icons)
        cyclers.add(cycler)
        val textLabel = JLabel(text)
        out.add(iconLabel, BorderLayout.LINE_START)
        out.add(textLabel, BorderLayout.CENTER)
        out.border = EmptyBorder(5, 5, 5, 5)
        return out
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        closeButton = JButton()
        aTabbedPane = JTabbedPane()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        title = "칩셋 조합기 가이드"
        modalityType = ModalityType.APPLICATION_MODAL
        isResizable = false
        type = Type.UTILITY
        addWindowListener(object : WindowAdapter() {
            override fun windowClosing(evt: WindowEvent) {
                formWindowClosing(evt)
            }
        })
        closeButton!!.text = "닫기"
        closeButton!!.addActionListener { evt: ActionEvent -> closeButtonActionPerformed(evt) }
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGap(0, 519, Short.MAX_VALUE.toInt())
                                        .addComponent(closeButton)
                                )
                                .addComponent(aTabbedPane)
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(aTabbedPane, GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE.toInt())
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton)
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun closeButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_closeButtonActionPerformed
        dispose()
    } //GEN-LAST:event_closeButtonActionPerformed

    private fun formWindowClosing(evt: WindowEvent) { //GEN-FIRST:event_formWindowClosing
        cyclers.forEach(Consumer { obj: ImageCycler -> obj.dispose() })
    } //GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var aTabbedPane: JTabbedPane? = null
    private var closeButton: JButton? = null // End of variables declaration//GEN-END:variables

    init {
        initComponents()
        init()
    }
}